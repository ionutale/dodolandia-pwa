{"version":3,"sources":["navigation/sidebar/sidebar.module.css","components/clan/clan.module.css","components/warAttackLog/warAttackLog.module.css","containers/CWL/cwl.module.css","containers/CWL_war/cwl_war.module.css","components/warMap/warMap.module.css","containers/CWL/CWL.js","components/warMap/warMap.js","components/warAttackLog/warAttackLog.js","network/axios.js","network/cwl-axios.js","containers/CWL_war/CWL_war.js","navigation/sidebar/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CWL","cwl","useContext","CWLContext","state","hasObjectAtIndex","dispatch","members","index","sortFirst","sort","a","b","townHallLevel","length","name","clans","undefined","className","css","CompareTable","largestClan","largerMemberList","rows","push","key","src","badgeUrls","small","alt","i","tableRows","WarMap","war","clanLeagueWar","sortPlayers","mapPosition","clan","opponent","player","opp","townhallLevel","playersTableRows","WarAttackLog","clanLeagueWarTag","sortAttacks","order","playerInfo","winOrLoose","Winner","Looser","attackListTable","CWLTag","attacks","players","map","filter","flat","attack","attackerName","find","p","tag","attackerTag","defenderName","defenderTag","remapAttacks","mainClanName","clan1Attack","clan2Attack","tableCount","stars","destructionPercentage","repeat","matchInfo","instance","axios","create","baseURL","headers","common","getClanLeague","get","getClanLeagueWar","CWL_war","match","useParams","console","log","useState","loading","setLoading","setWar","cwlData","res","data","useEffect","infoWar","Loading","withRouter","open","setCwl","clanTag","setClanTag","e","type","cwlWarTagLink","replace","attachedCSS","Sidebar","Open","Close","join","value","onChange","target","onClick","disabled","LinksList","to","rounds","warTags","cwlTagsLink","React","createContext","initialState","reducer","action","App","setOpen","useReducer","Provider","isOpen","menuClicked","width","height","strokeWidth","rotate","color","borderRadius","animationDuration","role","aria-label","packageJson","version","exact","path","component","strict","sensitive","CWLWar","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a899a9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"sidebar_Sidebar__1eRrB\",\"LinksList\":\"sidebar_LinksList__34O-i\",\"Open\":\"sidebar_Open__1m9lJ\",\"Close\":\"sidebar_Close__1K3N6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ClanContainer\":\"clan_ClanContainer__3L0XS\",\"MemberList\":\"clan_MemberList__3jEz5\",\"MemberInfo\":\"clan_MemberInfo__cpua8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareTable\":\"warAttackLog_CompareTable__188zp\",\"Winner\":\"warAttackLog_Winner__1XobU\",\"Looser\":\"warAttackLog_Looser__21HjE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareSection\":\"cwl_CompareSection__3JNHB\",\"CompareTable\":\"cwl_CompareTable__1a2Mt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"cwl_war_Loading__IDAyA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareTable\":\"warMap_CompareTable__1Kxci\",\"Winner\":\"warMap_Winner__jKFAS\",\"Looser\":\"warMap_Looser__2MJGC\"};","import React, { useContext } from 'react';\r\nimport Clan from '../../components/clan/clan'\r\nimport css from './cwl.module.css'\r\nimport { CWLContext } from '../../App'\r\n\r\nconst CWL = (cwl) => {\r\n\r\n\r\n  const {state, dispatch} = useContext(CWLContext);\r\n  const changeInputValue = (newValue) => {\r\n    dispatch({ type: 'UPDATE_CWL', data: newValue});\r\n  };\r\n\r\n  const clansColumns = clans => {\r\n    if (clans)\r\n      return clans.map(clan => {\r\n        return <Clan clan={clan}></Clan>\r\n      })\r\n    return null\r\n  }\r\n\r\n\r\n  const hasObjectAtIndex = (members, index) => {    \r\n    const sortFirst = members.sort((a, b) => (a.townHallLevel > b.townHallLevel) ? -1 : ((a.townHallLevel < b.townHallLevel) ? 1 : 0))    \r\n    if (sortFirst.length-1 >= index) \r\n      return  `th${sortFirst[index].townHallLevel} :${sortFirst[index].name}`\r\n    return ' ' \r\n  }\r\n\r\n  const largerMemberList = clans => {        \r\n    return clans.sort((a, b) => (a.members.length > b.members.length) ? -1 : ((a.members.length < b.members.length) ? 1 : 0))[0].members.length\r\n  }\r\n\r\n  const tableRows = (clans) => {\r\n    if (clans === undefined) return null\r\n\r\n    const largestClan = largerMemberList(clans)\r\n\r\n    let rows = []\r\n    rows.push(\r\n        <tr key='head-key'>\r\n          <th>#</th>\r\n          <th><img src={clans[0].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[0].name} <br></br> Membri:{clans[0].members.length}</th>\r\n          <th><img src={clans[1].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[1].name} <br></br> Membri:{clans[1].members.length}</th>\r\n          <th><img src={clans[2].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[2].name} <br></br> Membri:{clans[2].members.length}</th>\r\n          <th><img src={clans[3].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[3].name} <br></br> Membri:{clans[3].members.length}</th>\r\n          <th><img src={clans[4].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[4].name} <br></br> Membri:{clans[4].members.length}</th>\r\n          <th><img src={clans[5].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[5].name} <br></br> Membri:{clans[5].members.length}</th>\r\n          <th><img src={clans[6].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[6].name} <br></br> Membri:{clans[6].members.length}</th>\r\n          <th><img src={clans[7].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[7].name} <br></br> Membri:{clans[7].members.length}</th>\r\n        </tr>\r\n    )\r\n\r\n    for (let i = 0; i < largestClan; i++) {\r\n\r\n      rows.push(\r\n          <tr key={i}>\r\n            <td>{i+1}</td>\r\n            <td>{hasObjectAtIndex(clans[0].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[1].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[2].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[3].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[4].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[5].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[6].members, i)}</td>\r\n            <td>{hasObjectAtIndex(clans[7].members, i)}</td>\r\n          </tr>\r\n      )\r\n    }\r\n    return rows\r\n  }\r\n  \r\n  const clans = state.cwl === null ? undefined : state.cwl.clans\r\n  return (\r\n    <div>\r\n      <table className={css.CompareTable}>\r\n        <tbody>\r\n          {tableRows(clans)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CWL\r\n","import React from 'react'\r\nimport css from './warMap.module.css'\r\n\r\nconst WarMap = ({clanLeagueWar}) => {\r\n\r\n  const sortPlayers = members => members.sort((a, b) => (a.mapPosition < b.mapPosition) ? -1 : ((a.mapPosition < b.mapPosition) ? 1 : 0))\r\n  const playersTableRows = (clan, opponent) => {\r\n    let rows = []\r\n    for (let i = 0; i <= 14; i++) {\r\n      const player = clan[i];\r\n      const opp = opponent[i];\r\n      \r\n      rows.push(\r\n        <tr key={i}>\r\n          <td>{player.mapPosition} {player.name} - {player.townhallLevel}</td>\r\n          <td>{opp.mapPosition} {opp.name} - {opp.townhallLevel}</td>\r\n        </tr>\r\n      )\r\n    }\r\n    return rows\r\n  }\r\n\r\n  const createRows = war => {\r\n    const clan = sortPlayers(war.clan.members)\r\n    const opponent = sortPlayers(war.opponent.members)\r\n    return playersTableRows(clan, opponent)\r\n  }\r\n\r\n  if (clanLeagueWar === undefined || clanLeagueWar === null) return null\r\n\r\n  return (\r\n    <div>\r\n      <table className={css.CompareTable}>\r\n        <thead>\r\n          <tr>\r\n            <th><img src={clanLeagueWar.clan.badgeUrls.small} alt={clanLeagueWar.clan.name} /><p>{clanLeagueWar.clan.name}</p> </th>\r\n            <th><img src={clanLeagueWar.opponent.badgeUrls.small} alt={clanLeagueWar.opponent.name} /><p>{clanLeagueWar.opponent.name}</p> </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {createRows(clanLeagueWar)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}   \r\n\r\nexport default WarMap","import React from 'react'\r\nimport css from './warAttackLog.module.css'\r\n/**\r\n * Receive all data from clanLeagueWarTag\r\n * TODO: maybe not a very good idea to send all data here\r\n */\r\nconst WarAttackLog = ({clanLeagueWarTag}) => {\r\n\r\n  const sortAttacks = (a, b) => (a.order < b.order) ? -1 : ((a.order < b.order) ? 1 : 0)\r\n\r\n  // create a unique list of payers with clan name and attacks array\r\n  function remapAttacks(CWLTag) {\r\n    const players = [\r\n      ...CWLTag.clan.members.map(player => {return {...player, \"clan\": CWLTag.clan.name}}),\r\n      ...CWLTag.opponent.members.map(player => {return {...player, \"clan\": CWLTag.opponent.name}})\r\n    ]\r\n    // create a unique list of attacks only \r\n    const attacks = players\r\n      .filter(({attacks}) => attacks !== undefined)\r\n      .map(({attacks}) => { return attacks})\r\n      .flat()\r\n      .map( attack => {\r\n        return {\r\n          ...attack,\r\n          // may you should not use the name, and use the entire document, \r\n          // this way you can insert more info into the list table\r\n          attackerName: players.find(p => p.tag === attack.attackerTag),\r\n          defenderName: players.find(p => p.tag === attack.defenderTag),\r\n        }\r\n      })\r\n      .sort(sortAttacks)\r\n\r\n    \r\n    return attacks\r\n  }\r\n\r\n\r\n  /** \r\n   * return the start to display \r\n   * TODO: add also empty stars\r\n   */\r\n  const getStarts = number => '⭐'.repeat(number) // + '⭐'.repeat(3-number)\r\n\r\n  /**\r\n   * return the table rows\r\n   * but please revise this part. is outrages \r\n   */\r\n\r\n  const playerInfo = (name, townhallLevel, mapPosition, winOrLoose) => {\r\n    return (\r\n      <td className={winOrLoose ? css.Winner : css.Looser }>\r\n        <p><b>{mapPosition}. th{townhallLevel}</b> {name}</p>\r\n      </td>\r\n    )\r\n  }\r\n\r\n  const tableCount = (index) => (<td>{index}</td>)\r\n\r\n  const matchInfo = ({stars, destructionPercentage}) => {\r\n    return (\r\n            <td>\r\n              <p>{destructionPercentage}%</p>\r\n              <p>{getStarts(stars)}</p>\r\n            </td>\r\n    )\r\n  }\r\n\r\n  const attackListTable = (CWLTag) => {\r\n    const attacks = remapAttacks(CWLTag)\r\n    const mainClanName = CWLTag.clan.name\r\n\r\n    let rows = attacks.map( (attack, index) => {\r\n\r\n      // put each player on its own clan row\r\n\r\n      let clan1Attack, clan2Attack      \r\n      if (mainClanName === attack.attackerName.clan ) {\r\n        clan1Attack = playerInfo(attack.attackerName.name, attack.attackerName.townhallLevel, attack.attackerName.mapPosition, true)\r\n        clan2Attack = playerInfo(attack.defenderName.name, attack.defenderName.townhallLevel, attack.defenderName.mapPosition, false)\r\n\r\n      } else {\r\n        clan1Attack = playerInfo(attack.defenderName.name, attack.defenderName.townhallLevel, attack.defenderName.mapPosition, false)\r\n        clan2Attack = playerInfo(attack.attackerName.name, attack.attackerName.townhallLevel, attack.attackerName.mapPosition, true)\r\n      }\r\n\r\n      return (\r\n        <tr key={index}>\r\n          {tableCount(index)}\r\n          {clan1Attack}\r\n          {matchInfo(attack)}\r\n          {clan2Attack}\r\n        </tr>\r\n      )\r\n    })\r\n    return rows\r\n  }\r\n\r\n  const attackTable = () => {\r\n    const table = (\r\n      <table className={css.CompareTable}>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>\r\n              <img src={clanLeagueWarTag.clan.badgeUrls.small} alt=\"clanBadge\" />\r\n              <p>{clanLeagueWarTag.clan.name}</p> \r\n              <p>'⭐'{clanLeagueWarTag.clan.stars}</p>\r\n              <p>⚔{clanLeagueWarTag.clan.attacks}</p>\r\n            </th>\r\n            <th></th>\r\n            <th>\r\n              <img src={clanLeagueWarTag.opponent.badgeUrls.small} alt=\"clanBadge\" />\r\n              <p>{clanLeagueWarTag.opponent.name}</p> \r\n              <p>'⭐'{clanLeagueWarTag.opponent.stars}</p>\r\n              <p>⚔{clanLeagueWarTag.opponent.attacks}</p>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {attackListTable(clanLeagueWarTag)}\r\n        </tbody>\r\n      </table>\r\n    )\r\n    return table\r\n  }\r\n\r\n  return (\r\n\r\n    <div>\r\n      {attackTable()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WarAttackLog","import axios from 'axios'\r\nconst URL = {\r\n  dev: 'https://dodolandia.herokuapp.com/',\r\n  prod: 'https://dodolandia.herokuapp.com/'\r\n}\r\n// const token = localStorage.getItem('token')\r\n// const xUserId = localStorage.getItem('xUserId')\r\n\r\nconst instance = axios.create({\r\n  baseURL: process.env.NODE_ENV === 'production' ? URL.prod : URL.dev,\r\n  headers: {\r\n    common: {\r\n      // Authorization: `Bearer ${token}`,\r\n      // 'x-userid': xUserId\r\n    }\r\n  }\r\n})\r\n\r\nexport default instance","import axios from './axios'\r\nconst CWL_API = '/api/v2/coc'\r\n\r\n\r\nexport const getClanLeague = (tag) => {\r\n  return axios.get(`${CWL_API}/clanLeagueSync/${tag}`)\r\n}\r\n\r\nexport const getClanLeagueWar = (tag) => {\r\n  return axios.get(`${CWL_API}/clanLeagueWarsSync/${tag}`)\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport css from './cwl_war.module.css'\r\nimport WarMap from '../../components/warMap/warMap'\r\nimport WarAttackLog from '../../components/warAttackLog/warAttackLog'\r\nimport * as axios from '../../network/cwl-axios'\r\nimport { useParams } from 'react-router'\r\n\r\nconst CWL_war = ({match}) => {\r\n  const {tag} = useParams() \r\n  console.log(\"props.tag:\", tag, match)\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [war, setWar] = useState(null)\r\n  \r\n  const cwlData = async() => {\r\n    try {\r\n      setLoading(true)\r\n      console.log('request data to server for tag:', tag);\r\n      \r\n      const res = await axios.getClanLeagueWar(tag)\r\n      setWar(res.data)\r\n      console.log('data.received: ', res.data);\r\n      \r\n      setLoading(false)\r\n    } catch (error) {\r\n      setLoading(false)\r\n    }    \r\n  } \r\n\r\n  useEffect(() => {\r\n    console.log('mounted')\r\n    cwlData()\r\n  }, [match]);\r\n  \r\n\r\nconst spinner = () => (<p className={css.Loading}>Loading {tag}</p>)\r\n  const info = (infoWar) => {\r\n    console.log(\"info war is:\", infoWar, war, loading);\r\n    \r\n    if (war === null) return null\r\n    return (<div><WarAttackLog clanLeagueWarTag={infoWar}></WarAttackLog> <WarMap clanLeagueWar={infoWar}></WarMap></div>)\r\n  }\r\n  // for githubpages \r\n  return (\r\n    <div>\r\n      { loading ? spinner() : info(war)}\r\n      {/* {compareMapPos()} */}\r\n      {/* {attacksLog(attackLog(clanLeagueWar), clanLeagueWar.clan)} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CWL_war ","import React, {useState, useContext} from 'react'\r\nimport css from './sidebar.module.css'\r\nimport {NavLink, withRouter} from 'react-router-dom'\r\nimport { CWLContext } from '../../App'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport * as axios from '../../network/cwl-axios'\r\n\r\n\r\nconst DODOLANDIA_TAG = 'YQP0P9PP'\r\n\r\nconst Sidebar = ({\r\n  open = true\r\n}) => {\r\n\r\n  const {state, dispatch} = useContext(CWLContext)\r\n  const [cwl, setCwl] = useState(null)\r\n  const [clanTag, setClanTag] = useState(DODOLANDIA_TAG)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const onTagChange = (e) => {\r\n    setClanTag(e.target.value)\r\n  }\r\n\r\n  const cwlData = async(e, clanTag = DODOLANDIA_TAG) => {\r\n    try {\r\n      setLoading(true)\r\n      const res = await axios.getClanLeague(clanTag)\r\n      setCwl(res.data)\r\n      dispatch({ type: 'UPDATE_CWL', data: res.data})\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setLoading(false)\r\n    }    \r\n  } \r\n\r\n  function cwlWarTagLink (tag) { \r\n    return '/cwl/war/' + (tag.replace(/#/, ''))\r\n  }\r\n\r\n  const cwlTagsLink = (cwl) => {\r\n    if (cwl === null) return null\r\n    const list = cwl.rounds.map( (warTags, index) => {\r\n      console.log(warTags);\r\n      \r\n      return (\r\n        <li key={index}>\r\n          <div >\r\n            <p>Runda {index+1}</p>\r\n            <NavLink to={cwlWarTagLink(warTags.warTags[0])}>Grupul 1 </NavLink>\r\n            <NavLink to={cwlWarTagLink(warTags.warTags[1])}>Grupul 2 </NavLink>\r\n            <NavLink to={cwlWarTagLink(warTags.warTags[2])}>Grupul 3 </NavLink>\r\n            <NavLink to={cwlWarTagLink(warTags.warTags[3])}>Grupul 4 </NavLink>\r\n          </div>\r\n        </li>\r\n      )\r\n    });\r\n    return list\r\n  }\r\n\r\n  const attachedCSS = [css.Sidebar, open ? css.Open : css.Close].join(' ')\r\n  return (\r\n    <div className={attachedCSS}>\r\n      #<input value={clanTag} onChange={onTagChange}/>\r\n      <button onClick={cwlData} disabled={loading}> Cauta </button>\r\n      <ul className={css.LinksList}>\r\n      <li><NavLink to='/'>CWL</NavLink></li>\r\n          {cwlTagsLink(cwl)}\r\n        </ul>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default withRouter(Sidebar)","import React, { useState, useReducer } from 'react';\r\nimport './App.css';\r\nimport CWL from './containers/CWL/CWL'\r\nimport CWLWar from './containers/CWL_war/CWL_war'\r\nimport packageJson from '../package.json'\r\nimport Sidebar from './navigation/sidebar/sidebar'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport HamburgerMenu from 'react-hamburger-menu'\r\n\r\nexport const CWLContext = React.createContext('CWL');\r\n// Set up Initial State\r\nconst initialState = {\r\n  cwl: null,\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  console.log(action);\r\n  \r\n  switch (action.type) {\r\n      case 'UPDATE_CWL':\r\n          return {\r\n              cwl: action.data\r\n          };\r\n\r\n\r\n      default:\r\n          return initialState;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [open, setOpen] = useState(true);\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <CWLContext.Provider value={{state, dispatch}}>\r\n        <header className=\"App-header\">\r\n          <div className=\"Menu\">\r\n            <HamburgerMenu\r\n              isOpen={open}\r\n              menuClicked={() => setOpen(!open)}\r\n              width={28}\r\n              height={25}\r\n              strokeWidth={1}\r\n              rotate={0}\r\n              color='white'\r\n              borderRadius={0}\r\n              animationDuration={0.2}\r\n            />\r\n          </div>\r\n\r\n          <div className='Title'>\r\n            Clan War League\r\n          <p className=\"Version\">\r\n              Made With <span role=\"img\" aria-label=\"love\">❤️</span> By (_d0do_)  ©v{packageJson.version}\r\n            </p>\r\n          </div>\r\n        </header>\r\n        <article className=\".Content\" >\r\n          <Sidebar open={open} ></Sidebar>\r\n\r\n          <Switch>\r\n            <Route exact path=\"/\" component={CWL}></Route>\r\n            <Route \r\n              exact\r\n              strict\r\n              sensitive\r\n              path=\"/cwl/war/:tag\" \r\n              component={CWLWar}\r\n              ></Route>\r\n          </Switch>\r\n        </article>\r\n      </CWLContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n  <App />\r\n</BrowserRouter>\r\n\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}