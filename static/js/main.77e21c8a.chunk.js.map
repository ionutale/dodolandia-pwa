{"version":3,"sources":["navigation/sidebar/sidebar.module.css","components/clan/clan.module.css","components/warAttackLog/warAttackLog.module.css","containers/CWL/cwl.module.css","containers/CWL_war/cwl_war.module.css","components/warMap/warMap.module.css","containers/CWL/CWL.js","components/warAttackLog/warAttackLog.js","network/axios.js","network/cwl-axios.js","containers/CWL_war/CWL_war.js","navigation/sidebar/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CWL","cwl","useContext","CWLContext","state","hasObjectAtIndex","dispatch","members","index","sortFirst","sort","a","b","townHallLevel","length","name","clans","undefined","className","css","CompareTable","largestClan","largerMemberList","rows","push","key","src","badgeUrls","small","alt","i","tableRows","WarAttackLog","clanLeagueWarTag","sortAttacks","order","playerInfo","townhallLevel","mapPosition","winOrLoose","Winner","Looser","attackListTable","CWLTag","attacks","players","clan","map","player","opponent","filter","flat","attack","attackerName","find","p","tag","attackerTag","defenderName","defenderTag","remapAttacks","mainClanName","clan1Attack","clan2Attack","tableCount","stars","destructionPercentage","repeat","matchInfo","instance","axios","create","baseURL","headers","common","getClanLeague","get","getClanLeagueWar","CWL_war","match","useParams","console","log","useState","loading","setLoading","war","setWar","cwlData","res","data","useEffect","infoWar","Loading","withRouter","open","setCwl","clanTag","setClanTag","e","type","cwlWarTagLink","replace","attachedCSS","Sidebar","Open","Close","join","value","onChange","target","onClick","disabled","LinksList","to","rounds","warTags","test","cwlTagsLink","React","createContext","initialState","reducer","action","App","setOpen","useReducer","Provider","isOpen","menuClicked","width","height","strokeWidth","rotate","color","borderRadius","animationDuration","role","aria-label","packageJson","version","exact","path","component","strict","sensitive","CWLWar","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77e21c8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"sidebar_Sidebar__3-4qe\",\"LinksList\":\"sidebar_LinksList__2NLIl\",\"Open\":\"sidebar_Open__2bJA_\",\"Close\":\"sidebar_Close__1J4yu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ClanContainer\":\"clan_ClanContainer__3ajVo\",\"MemberList\":\"clan_MemberList__285WS\",\"MemberInfo\":\"clan_MemberInfo__1mUxs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareTable\":\"warAttackLog_CompareTable__24U5c\",\"Winner\":\"warAttackLog_Winner__vaG4N\",\"Looser\":\"warAttackLog_Looser__6MzMU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareSection\":\"cwl_CompareSection__2-UFM\",\"CompareTable\":\"cwl_CompareTable__2JDdQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"cwl_war_Loading__1EuD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompareTable\":\"warMap_CompareTable__UKrim\",\"Winner\":\"warMap_Winner__TuWSl\",\"Looser\":\"warMap_Looser__2NVRH\"};","import React, { useContext } from 'react';\nimport Clan from '../../components/clan/clan'\nimport css from './cwl.module.css'\nimport { CWLContext } from '../../App'\n\nconst CWL = (cwl) => {\n\n\n  const {state, dispatch} = useContext(CWLContext);\n  const changeInputValue = (newValue) => {\n    dispatch({ type: 'UPDATE_CWL', data: newValue});\n  };\n\n  const clansColumns = clans => {\n    if (clans)\n      return clans.map(clan => {\n        return <Clan clan={clan}></Clan>\n      })\n    return null\n  }\n\n\n  const hasObjectAtIndex = (members, index) => {    \n    const sortFirst = members.sort((a, b) => (a.townHallLevel > b.townHallLevel) ? -1 : ((a.townHallLevel < b.townHallLevel) ? 1 : 0))    \n    if (sortFirst.length-1 >= index) \n      return  `th${sortFirst[index].townHallLevel} :${sortFirst[index].name}`\n    return ' ' \n  }\n\n  const largerMemberList = clans => {        \n    return clans.sort((a, b) => (a.members.length > b.members.length) ? -1 : ((a.members.length < b.members.length) ? 1 : 0))[0].members.length\n  }\n\n  const tableRows = (clans) => {\n    if (clans === undefined) return null\n\n    const largestClan = largerMemberList(clans)\n\n    let rows = []\n    rows.push(\n        <tr key='head-key'>\n          <th>#</th>\n          <th><img src={clans[0].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[0].name} <br></br> Membri:{clans[0].members.length}</th>\n          <th><img src={clans[1].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[1].name} <br></br> Membri:{clans[1].members.length}</th>\n          <th><img src={clans[2].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[2].name} <br></br> Membri:{clans[2].members.length}</th>\n          <th><img src={clans[3].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[3].name} <br></br> Membri:{clans[3].members.length}</th>\n          <th><img src={clans[4].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[4].name} <br></br> Membri:{clans[4].members.length}</th>\n          <th><img src={clans[5].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[5].name} <br></br> Membri:{clans[5].members.length}</th>\n          <th><img src={clans[6].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[6].name} <br></br> Membri:{clans[6].members.length}</th>\n          <th><img src={clans[7].badgeUrls.small} alt=\"clanBadge\" /><br></br> {clans[7].name} <br></br> Membri:{clans[7].members.length}</th>\n        </tr>\n    )\n\n    for (let i = 0; i < largestClan; i++) {\n\n      rows.push(\n          <tr key={i}>\n            <td>{i+1}</td>\n            <td>{hasObjectAtIndex(clans[0].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[1].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[2].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[3].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[4].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[5].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[6].members, i)}</td>\n            <td>{hasObjectAtIndex(clans[7].members, i)}</td>\n          </tr>\n      )\n    }\n    return rows\n  }\n  \n  const clans = state.cwl === null ? undefined : state.cwl.clans\n  return (\n    <div>\n      <table className={css.CompareTable}>\n        <tbody>\n          {tableRows(clans)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default CWL\n","import React from 'react'\nimport css from './warAttackLog.module.css'\n/**\n * Receive all data from clanLeagueWarTag\n * TODO: maybe not a very good idea to send all data here\n */\nconst WarAttackLog = ({clanLeagueWarTag}) => {\n\n  const sortAttacks = (a, b) => (a.order < b.order) ? -1 : ((a.order < b.order) ? 1 : 0)\n\n  // create a unique list of payers with clan name and attacks array\n  function remapAttacks(CWLTag) {\n    const players = [\n      ...CWLTag.clan.members.map(player => {return {...player, \"clan\": CWLTag.clan.name}}),\n      ...CWLTag.opponent.members.map(player => {return {...player, \"clan\": CWLTag.opponent.name}})\n    ]\n    // create a unique list of attacks only \n    const attacks = players\n      .filter(({attacks}) => attacks !== undefined)\n      .map(({attacks}) => { return attacks})\n      .flat()\n      .map( attack => {\n        return {\n          ...attack,\n          // may you should not use the name, and use the entire document, \n          // this way you can insert more info into the list table\n          attackerName: players.find(p => p.tag === attack.attackerTag),\n          defenderName: players.find(p => p.tag === attack.defenderTag),\n        }\n      })\n      .sort(sortAttacks)\n\n    \n    return attacks\n  }\n\n\n  /** \n   * return the start to display \n   * TODO: add also empty stars\n   */\n  const getStarts = number => '⭐'.repeat(number) // + '⭐'.repeat(3-number)\n\n  /**\n   * return the table rows\n   * but please revise this part. is outrages \n   */\n\n  const playerInfo = (name, townhallLevel, mapPosition, winOrLoose) => {\n    return (\n      <td className={winOrLoose ? css.Winner : css.Looser }>\n        <p><b>{mapPosition}. th{townhallLevel}</b> {name}</p>\n      </td>\n    )\n  }\n\n  const tableCount = (index) => (<td>{index}</td>)\n\n  const matchInfo = ({stars, destructionPercentage}) => {\n    return (\n            <td>\n              <p>{destructionPercentage}%</p>\n              <p>{getStarts(stars)}</p>\n            </td>\n    )\n  }\n\n  const attackListTable = (CWLTag) => {\n    const attacks = remapAttacks(CWLTag)\n    const mainClanName = CWLTag.clan.name\n\n    let rows = attacks.map( (attack, index) => {\n\n      // put each player on its own clan row\n\n      let clan1Attack, clan2Attack      \n      if (mainClanName === attack.attackerName.clan ) {\n        clan1Attack = playerInfo(attack.attackerName.name, attack.attackerName.townhallLevel, attack.attackerName.mapPosition, true)\n        clan2Attack = playerInfo(attack.defenderName.name, attack.defenderName.townhallLevel, attack.defenderName.mapPosition, false)\n\n      } else {\n        clan1Attack = playerInfo(attack.defenderName.name, attack.defenderName.townhallLevel, attack.defenderName.mapPosition, false)\n        clan2Attack = playerInfo(attack.attackerName.name, attack.attackerName.townhallLevel, attack.attackerName.mapPosition, true)\n      }\n\n      return (\n        <tr key={index}>\n          {tableCount(index)}\n          {clan1Attack}\n          {matchInfo(attack)}\n          {clan2Attack}\n        </tr>\n      )\n    })\n    return rows\n  }\n\n  const attackTable = () => {\n    const table = (\n      <table className={css.CompareTable}>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <img src={clanLeagueWarTag.clan.badgeUrls.small} alt=\"clanBadge\" />\n              <p>{clanLeagueWarTag.clan.name}</p> \n              <p>'⭐'{clanLeagueWarTag.clan.stars}</p>\n              <p>⚔{clanLeagueWarTag.clan.attacks}</p>\n            </th>\n            <th></th>\n            <th>\n              <img src={clanLeagueWarTag.opponent.badgeUrls.small} alt=\"clanBadge\" />\n              <p>{clanLeagueWarTag.opponent.name}</p> \n              <p>'⭐'{clanLeagueWarTag.opponent.stars}</p>\n              <p>⚔{clanLeagueWarTag.opponent.attacks}</p>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {attackListTable(clanLeagueWarTag)}\n        </tbody>\n      </table>\n    )\n    return table\n  }\n\n  return (\n\n    <div>\n      {attackTable()}\n    </div>\n  )\n}\n\nexport default WarAttackLog","import axios from 'axios'\nconst URL = {\n  dev: 'https://dodolandia-service-api.appspot.com/',\n  prod: 'https://dodolandia-service-api.appspot.com/'\n}\n// const token = localStorage.getItem('token')\n// const xUserId = localStorage.getItem('xUserId')\n\nconst instance = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? URL.prod : URL.dev,\n  headers: {\n    common: {\n      // Authorization: `Bearer ${token}`,\n      // 'x-userid': xUserId\n    }\n  }\n})\n\nexport default instance","import axios from './axios'\nconst CWL_API = '/api/v2/coc'\n\n\nexport const getClanLeague = (tag) => {\n  return axios.get(`${CWL_API}/clanLeagueSync/${tag}`)\n}\n\nexport const getClanLeagueWar = (tag) => {\n  return axios.get(`${CWL_API}/clanLeagueWarsSync/${tag}`)\n}\n\n\n","import React, { useState, useEffect } from 'react';\nimport css from './cwl_war.module.css'\nimport WarMap from '../../components/warMap/warMap'\nimport WarAttackLog from '../../components/warAttackLog/warAttackLog'\nimport * as axios from '../../network/cwl-axios'\nimport { useParams } from 'react-router'\n\nconst CWL_war = ({match}) => {\n  const {tag} = useParams() \n  console.log(\"props.tag:\", tag, match)\n\n  const [loading, setLoading] = useState(false)\n  const [war, setWar] = useState(null)\n  \n  const cwlData = async() => {\n    try {\n      setLoading(true)\n      console.log('request data to server for tag:', tag);\n      \n      const res = await axios.getClanLeagueWar(tag)\n      setWar(res.data)\n      console.log('data.received: ', res.data);\n      \n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n    }    \n  } \n\n  useEffect(() => {\n    console.log('mounted')\n    cwlData()\n  }, [match]);\n  \n\nconst spinner = () => (<p className={css.Loading}>Loading {tag}</p>)\n  const info = (infoWar) => {\n    console.log(\"info war is:\", infoWar, war, loading);\n    \n    if (war === null) return null\n    // war map is not displaying the players chosen for the battle, but instead the entire players that CAN make part of the war\n    // is creating confusion, for now is better to not display it  \n    // return (<div><WarAttackLog clanLeagueWarTag={infoWar}></WarAttackLog> <WarMap clanLeagueWar={infoWar}></WarMap></div>)\n    return (<div><WarAttackLog clanLeagueWarTag={infoWar}></WarAttackLog> </div>)\n  }\n  // for githubpages \n  return (\n    <div>\n      { loading ? spinner() : info(war)}\n      {/* {compareMapPos()} */}\n      {/* {attacksLog(attackLog(clanLeagueWar), clanLeagueWar.clan)} */}\n    </div>\n  );\n}\n\nexport default CWL_war ","import React, {useState, useContext} from 'react'\nimport css from './sidebar.module.css'\nimport {NavLink, withRouter} from 'react-router-dom'\nimport { CWLContext } from '../../App'\nimport {Redirect} from 'react-router-dom'\n\nimport * as axios from '../../network/cwl-axios'\n\n\nconst DODOLANDIA_TAG = 'YQP0P9PP'\n\nconst Sidebar = ({\n  open = true\n}) => {\n\n  const {state, dispatch} = useContext(CWLContext)\n  const [cwl, setCwl] = useState(null)\n  const [clanTag, setClanTag] = useState(DODOLANDIA_TAG)\n  const [loading, setLoading] = useState(false)\n\n  const onTagChange = (e) => {\n    setClanTag(e.target.value)\n  }\n\n  const cwlData = async(e, clanTag = DODOLANDIA_TAG) => {\n    try {\n      setLoading(true)\n      const res = await axios.getClanLeague(clanTag)\n      setCwl(res.data)\n      dispatch({ type: 'UPDATE_CWL', data: res.data})\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n    }    \n  } \n\n  function cwlWarTagLink (tag) { \n    return '/cwl/war/' + (tag.replace(/#/, ''))\n  }\n\n  const cwlTagsLink = (cwl) => {\n    if (cwl === null) return null\n    const list = cwl.rounds.map( (warTags, index) => {\n      console.log(warTags.warTags);\n      // groups not ready yet, don't display as contain no informatino\n      if (/#0/.test(warTags.warTags[0])) return null\n\n      return (\n        <li key={index}>\n          <div >\n            <p>Runda {index+1}</p>\n            <NavLink to={cwlWarTagLink(warTags.warTags[0])}>Grupul 1 </NavLink>\n            <NavLink to={cwlWarTagLink(warTags.warTags[1])}>Grupul 2 </NavLink>\n            <NavLink to={cwlWarTagLink(warTags.warTags[2])}>Grupul 3 </NavLink>\n            <NavLink to={cwlWarTagLink(warTags.warTags[3])}>Grupul 4 </NavLink>\n          </div>\n        </li>\n      )\n    });\n    return list\n  }\n\n  const attachedCSS = [css.Sidebar, open ? css.Open : css.Close].join(' ')\n  return (\n    <div className={attachedCSS}>\n      #<input value={clanTag} onChange={onTagChange}/>\n      <button onClick={cwlData} disabled={loading}> Cauta </button>\n      <ul className={css.LinksList}>\n      <li><NavLink to='/'>Toate Clanurile</NavLink></li>\n          {cwlTagsLink(cwl)}\n        </ul>\n    </div>\n  )\n\n}\n\n\nexport default withRouter(Sidebar)","import React, { useState, useReducer } from 'react';\nimport './App.css';\nimport CWL from './containers/CWL/CWL'\nimport CWLWar from './containers/CWL_war/CWL_war'\nimport packageJson from '../package.json'\nimport Sidebar from './navigation/sidebar/sidebar'\nimport { Switch, Route } from 'react-router-dom'\nimport HamburgerMenu from 'react-hamburger-menu'\n\nexport const CWLContext = React.createContext('CWL');\n// Set up Initial State\nconst initialState = {\n  cwl: null,\n};\n\nfunction reducer(state, action) {\n  console.log(action);\n  \n  switch (action.type) {\n      case 'UPDATE_CWL':\n          return {\n              cwl: action.data\n          };\n\n\n      default:\n          return initialState;\n  }\n}\n\nfunction App() {\n  const [open, setOpen] = useState(true);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n\n  return (\n\n    <div className=\"App\">\n      <CWLContext.Provider value={{state, dispatch}}>\n        <header className=\"App-header\">\n          <div className=\"Menu\">\n            <HamburgerMenu\n              isOpen={open}\n              menuClicked={() => setOpen(!open)}\n              width={28}\n              height={25}\n              strokeWidth={1}\n              rotate={0}\n              color='white'\n              borderRadius={0}\n              animationDuration={0.2}\n            />\n          </div>\n\n          <div className='Title'>\n            Clan War League\n          <p className=\"Version\">\n              Made With <span role=\"img\" aria-label=\"love\">❤️</span> By (_d0do_)  ©v{packageJson.version}\n            </p>\n          </div>\n        </header>\n        <article className=\".Content\" >\n          <Sidebar open={open} ></Sidebar>\n\n          <Switch>\n            <Route exact path=\"/\" component={CWL}></Route>\n            <Route \n              exact\n              strict\n              sensitive\n              path=\"/cwl/war/:tag\" \n              component={CWLWar}\n              ></Route>\n          </Switch>\n        </article>\n      </CWLContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n<BrowserRouter>\n  <App />\n</BrowserRouter>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}